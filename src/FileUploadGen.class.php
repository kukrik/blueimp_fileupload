<?php

namespace QCubed\Plugin;

use QCubed as Q;
use QCubed\Exception\Caller;
use QCubed\Exception\InvalidCast;
use QCubed\Project\Control\ControlBase;
use QCubed\Type;

/**
 * Generated FileUploadGen class.
 *
 * This is the FileUploadGen class which is automatically generated by scraping the JQuery UI documentation website.
 * As such, it includes all the options as listed by the JQuery UI website, which may or may not be appropriate for QCubed.
 * See the FileUploadBase class for any glue code to make this class more usable in QCubed 4v.
 *
 * @see FileUploadBase
 * @package QCubed\Plugin
 *
 * @package Controls\Base
 *
 * @property string $Url A string containing the URL to which the request is sent. If undefined or empty, it is set to
 *          the action property of the file upload form if available, or else the URL of the current page.
 * @property string $Type The HTTP request method for the file uploads. Can be "POST", "PUT" or "PATCH" and defaults to "POST".
 * @property string $DataType The type of data that is expected back from the server.
 *        Note: The UI version of the File Upload plugin sets this option to "json" by default.
 * @property mixed $DropZone The drop target <a href="http://api.jquery.com/Types/#jQuery">jQuery object</a>, by default
 *        the complete document. Set to null or an empty jQuery collection to disable drag & drop support:
 * @property mixed $PasteZone The paste target <a href="http://api.jquery.com/Types/#jQuery">jQuery object</a>, by the
 *        default the complete document.<br> Set to null or an empty jQuery collection to disable paste support:
 * @property mixed $FileInput The file input field <a href="http://api.jquery.com/Types/#jQuery">jQuery object</a>, that is
 *        listened for change events. If undefined, it is set to the file input fields inside of the widget element on plugin
 *        initialization. Set to null or an empty jQuery collection to disable the change listener.
 * @property boolean $ReplaceFileInput By default, the file input field is replaced with a clone after each input field
 *        change event. This is required for iframe transport queues and allows change events to be fired for the same file
 *        selection, but can be disabled by setting this option to false (more in-depth information can be found
 *        <a href="https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#why-is-the-file-input-field-cloned-and-replaced-after-each-selection">in
 *        the FAQ</a>).
 * @property string $ParamName The parameter name for the file form data (the request argument name).<br> If undefined
 *        or empty, the name property of the file input field is used, or "files[]" if the file input name property is also
 *        empty. Can be a string or an array of strings.
 * @property string $FormAcceptCharset Allows to set the accept-charset attribute for the iframe upload forms.
 *        If formAcceptCharset is not set, the accept-charset attribute of the file upload widget form is used, if available.
 * @property boolean $SingleFileUploads By default, each file of a selection is uploaded using an individual request for
 *        <a href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> type uploads. Set this option to false to upload
 *        file selections in one request each.
 *        Note: Uploading multiple files with one request requires the multipart option to be set to true (the default).
 * @property integer $LimitMultiFileUploads To limit the number of files uploaded with one
 *        <a href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> request, set the following option to an integer greater than 0:
 * @property boolean $SequentialUploads Set this option to true to issue all file upload requests in a sequential order
 *        instead of simultaneous requests.
 * @property integer $LimitConcurrentUploads To limit the number of concurrent uploads, set this option to an integer
 *        value greater than 0.
 * @property boolean $ForceIframeTransport Set this option to true to force iframe transport uploads, even if the browser
 *        is capable of <a href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> file uploads.
 *        This can be useful for cross-site file uploads, if the
 *        <a href="https://developer.mozilla.org/En/HTTP_Access_Control#Access-Control-Allow-Origin">Access-Control-Allow-Origin</a>
 *        header cannot be set for the server-side upload handler which is required for cross-site
 *        <a href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> file uploads.
 * @property string $Redirect Set this option to the location of a redirect url on the origin server (the server that
 *        hosts the file upload form), for cross-domain iframe transport uploads. If set, this value is sent as part of the
 *        form data to the upload server.<br> The upload server is supposed to redirect the browser to this url after the upload
 *        completes and append the upload information as URL-encoded JSON string to the redirect URL, e.g. by replacing the "%s"
 *        character sequence.
 * @property string $RedirectParamName The parameter name for the redirect url, sent as part of the form data and set to
 *        'redirect' if this option is empty.
 * @property string $PostMessage Set this option to the location of a
 *        <a href="https://github.com/blueimp/jQuery-File-Upload/blob/master/cors/postmessage.html">postMessage API</a> on
 *        the upload server, to enable cross-domain
 *        <a href="https://github.com/blueimp/jQuery-File-Upload/blob/master/js/cors/jquery.postmessage-transport.js">
 *        postMessage transport</a> uploads.
 * @property boolean $MultiPart By default, <a href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> file uploads
 *        are sent as multipart/form-data. The iframe transport is always using multipart/form-data. If this option
 *        is set to false, the file content is streamed to the server url instead of sending a <a
 *        href="http://www.ietf.org/rfc/rfc2388.txt">RFC 2388</a> multipart message for <a
 *        href="https://developer.mozilla.org/en/xmlhttprequest">XMLHttpRequest</a> file uploads. Non-multipart uploads
 *        are also referred to as <a href="http://de.php.net/manual/en/features.file-upload.put-method.php">HTTP
 *        PUT file upload</a>.
 *        Note: Additional form data is ignored when the multipart option is set to false. Non-multipart uploads
 *        (*multipart: false*) are broken in Safari 5.1 - see <a href="https://github.com/blueimp/jQuery-File-Upload/issues/700">issue
 *        #700</a>.
 * @property integer $MaxChunkSize To upload large files in smaller chunks, set this option to a preferred maximum chunk size.
 *        If set to 0, null or undefined, or the browser does not support the required <a
 *        href="https://developer.mozilla.org/en/DOM/Blob">Blob API</a>, files will be uploaded as a whole.
 *        For chunked uploads to work in Mozilla Firefox, the multipart option has to be set to false. This is due to
 *        Gecko 2.0 (Firefox 4 etc.) adding blobs with an empty filename when building a multipart upload request using the <a
 *        href="https://developer.mozilla.org/en/XMLHttpRequest/FormData">FormData</a> interface - see <a
 *        href="https://bugzilla.mozilla.org/show_bug.cgi?id=649150">Bugzilla entry #649150</a>. Several server-side
 *        frameworks (including PHP and Django) cannot handle multipart file uploads with empty filenames.
 *        Note: If this option is enabled and singleFileUploads is set to false, only the first file of a selection will be uploaded.
 * @property integer $UploadedBytes When a non-multipart upload or a chunked multipart upload has been aborted, this option
 *        can be used to resume the upload by setting it to the size of the already uploaded bytes. This option is most
 *        useful when modifying the options object inside of the "add" or "send" callbacks, as the options are cloned for
 *        each file upload.
 * @property boolean $RecalculateProgress By default, failed (abort or error) file uploads are removed from the
 *        global progress calculation. Set this option to false to prevent recalculating the global progress data.
 * @property integer $ProgressInterval The minimum time interval in milliseconds to calculate and trigger
 *        progress events.
 * @property integer $BitrateInterval The minimum time interval in milliseconds to calculate progress bitrate.
 * @property array $FormData Additional form data to be sent along with the file uploads can be set using this option,
 *        which accepts an array of objects with name and value properties, a function returning such an array, a <a
 *        href="https://developer.mozilla.org/en/XMLHttpRequest/FormData">FormData</a> object (for <a
 *        href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> file uploads), or a simple object. The form of
 *        the first fileInput is given as parameter to the function.
 *        Note: Additional form data is ignored when the multipart option is set to false.
 * @property callable $Add The add callback can be understood as the callback for the file upload request queue. It is
 *        invoked as soon as files are added to the fileupload widget - via file input selection, drag & drop or add <a
 *        class="internal present" href="/blueimp/jQuery-File-Upload/wiki/API">API</a> call.
 *        The data parameter allows to override plugin options as well as define ajax settings. data.files holds a list of
 *        files for the upload request: If the singleFileUploads option is enabled (which is the default), the add callback
 *        will be called once for each file in the selection for <a
 *        href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> file uploads, with a data.files array length of one,
 *        as each file is uploaded individually. Else the add callback will be called once for each file selection.
 *        The upload starts when the submit method is invoked on the data parameter. data.submit() returns
 *        a <a href="http://api.jquery.com/Types/#Promise">Promise</a> object and allows to attach additional handlers
 *        using jQuery's <a href="http://api.jquery.com/category/deferred-object/">Deferred</a>
 *        callbacks.
 * @property callable $Submit Callback for the submit event of each file upload. If this callback returns false, the file
 *        upload request is not started.
 * @property callable $Send Callback for the start of each file upload request. If this callback returns false, the file
 *        upload request is aborted.
 * @property callable $Done Callback for successful upload requests. This callback is the equivalent to the success
 *        callback provided by <a href="http://api.jquery.com/jQuery.ajax/">jQuery ajax()</a> and will also
 *        be called if the server returns a JSON response with an error property.
 * @property callable $Fail Callback for failed (abort or error) upload requests. This callback is the equivalent to
 *        the error callback provided by <a href="http://api.jquery.com/jQuery.ajax/">jQuery ajax()</a> and will not be
 *        called if the server returns a JSON response with an error property, as this counts as successful request due to
 *        the successful HTTP response.
 * @property callable $Always Callback for completed (success, abort or error) upload requests. This callback is
 *        the equivalent to the complete callback provided by <a href="http://api.jquery.com/jQuery.ajax/">jQuery ajax()</a>.
 * @property callable $Progress Callback for upload progress events.
 * @property callable $ProgressAll Callback for global upload progress events.
 * @property callable $Start Callback for uploads start, equivalent to the global
 *        <a href="http://api.jquery.com/ajaxStart/">ajaxStart</a> event (but for file upload requests only).
 * @property callable $Stop Callback for uploads stop, equivalent to the global <a
 *        href="http://api.jquery.com/ajaxStop/">ajaxStop</a> event (but for file upload requests only).
 * @property callable $Change Callback for change events of the fileInput collection.
 * @property callable $Paste Callback for paste events to the dropZone collection.
 * @property callable $Drop Callback for drop events of the dropZone collection.
 * @property callable $Dragover Callback for dragover events of the dropZone collection.
 * @property boolean $ChunkSend Callback for the start of each chunk upload request. If this callback returns false,
 *        the chunk upload request is aborted.
 * @property boolean $ChunkDone Callback for successful chunk upload requests.
 * @property boolean $ChunkFail Callback for failed (abort or error) chunk upload requests.
 * @property boolean $ChunkAlways Callback for completed (success, abort or error) chunk upload requests.
 * @property boolean $AutoUpload By default, files added to the widget are uploaded as soon as the user clicks on
 *        the start buttons. To enable automatic uploads, set this option to true.
 * @property array $ProcessQueue A list of file processing actions.
 * @property callable $ProcessStart Callback for the start of the fileupload processing queue.
 * @property callable $Process Callback for the start of an individual file processing queue.
 * @property callable $ProcessDone Callback for the successful end of an individual file processing queue.
 * @property callable $ProcessFail Callback for the failure of an individual file processing queue.
 * @property callable $ProcessAlways Callback for the end (done or fail) of an individual file processing queue.
 * @property callable $ProcessStop Callback for the stop of the fileupload processing queue.
 * @property boolean $DisableImageHead Disable parsing and storing the image header.
 * @property boolean $DisableExif Disable parsing Exif data.
 * @property boolean $DisableExifThumbnail Disable parsing the Exif Thumbnail.
 * @property boolean $DisableExifSub Disable parsing the Exif Sub IFD (additional Exif info).
 * @property boolean $DisableExifGps Disable parsing Exif Gps data.
 * @property boolean $DisableImageMetaDataLoad Disable parsing image meta data (image head and Exif data).
 * @property boolean $DisableImageMetaDataSave Disables saving the image meta data into the resized images.
 * @property string $LoadImageFileTypes The regular expression for the types of images to load, matched against
 *        the file type.
 * @property integer $LoadImageMaxFileSize The maximum file size of images to load.
 * @property boolean $LoadImageNoRevoke Don't revoke the object URL created to load the image.
 * @property boolean $DisableImageLoad Disable loading and therefore processing of images.
 * @property integer $ImageMaxWidth The maximum width of resized images.
 * @property integer $ImageMaxHeight The maximum height of resized images.
 * @property integer $ImageMinWidth The minimum width of resized images.
 * @property integer $ImageMinHeight The minimum height of resized images.
 * @property boolean $ImageCrop Define if resized images should be cropped or only scaled.
 * @property boolean $DisableImageResize Disables the resize image functionality.
 * @property integer $PreviewMaxWidth The maximum width of the preview images.
 * @property integer $PreviewMaxHeight The maximum height of the preview images.
 * @property integer $PreviewMinWidth The minimum width of preview images.
 * @property integer $PreviewMinHeight The minimum height of preview images.
 * @property boolean $PreviewCrop Define if preview images should be cropped or only scaled.
 * @property integer $PreviewOrientation Defines the preview orientation (1-8) or takes the orientation value
 *        from Exif data if set to true.
 * @property boolean $PreviewThumbnail Create the preview using the Exif data thumbnail.
 * @property boolean $PreviewCanvas Define if preview images should be resized as canvas elements.
 * @property string $ImagePreviewName Define the name of the property that the preview element is stored as on
 *        the File object.
 * @property boolean $DisableImagePreview Disables image previews.
 * @property string $LoadAudioFileTypes The regular expression for the types of audio files to load, matched
 *        against the file type.
 * @property integer $LoadAudioMaxFileSize The maximum file size of audio files to load.
 * @property string $AudioPreviewName Define the name of the property that the preview element is stored as on
 *        the File object.
 * @property boolean $DisableAudioPreview Disable audio previews.
 * @property string $LoadVideoFileTypes The regular expression for the types of video files to load, matched
 *        against the file type.
 * @property integer $LoadVideoMaxFileSize The maximum file size of video files to load.
 * @property string $VideoPreviewName Define the name of the property that the preview element is stored as on
 *        the File object.
 * @property boolean $DisableVideoPreview Disable video previews.
 * @property string $AcceptFileTypes The regular expression for allowed file types, matches against either
 *        file type or file name as only browsers with support for the <a
 *        href="https://developer.mozilla.org/en/DOM/file">File API</a> report the file type.
 * @property integer $MaxFileSize The maximum allowed file size in bytes.
 * @property integer $MinFileSize The minimum allowed file size in bytes.
 * @property integer $MaxNumberOfFiles This option limits the number of files that are allowed to be uploaded
 *        using this widget. By default, unlimited file uploads are allowed.
 * @property boolean $DisableValidation Disables file validation.
 * @property callable $GetNumberOfFiles This option is a function that returns the current number of files
 *        selected and uploaded. It is used in the maxNumberOfFiles validation.
 * @property mixed $FilesContainer The container for the files listed for upload / download. Is transformed into a
 *        <a href="http://api.jquery.com/Types/#jQuery">jQuery object</a> if set as DOM node or string.
 * @property boolean $PrependFiles By default, files are appended to the files container. Set this option to true,
 *        to prepend files instead.
 * @property callable $UploadTemplate The upload template function - see <a class="internal present"
 *        href="/blueimp/jQuery-File-Upload/wiki/Template-Engine">Template Engine</a>.
 * @property string $UploadTemplateId The ID of the upload template, given as parameter to the <a
 *        href="https://github.com/blueimp/JavaScript-Templates">tmpl()</a> method to set the uploadTemplate option.
 * @property callable $DownloadTemplate The download template function - see <a class="internal present"
 *        href="/blueimp/jQuery-File-Upload/wiki/Template-Engine">Template Engine</a>.
 * @property string $DownloadTemplateId The ID of the download template, given as parameter to the <a
 *        href="https://github.com/blueimp/JavaScript-Templates">tmpl()</a> method to set the downloadTemplate option.
 * @property callable $Destroy Callback for file deletion events.
 *        Note: Since the UI version already sets this callback option, it is recommended to use
 *        the event binding method to attach additional event listeners.
 * @property callable $Destroyed The destroyed callback is the equivalent to the destroy callback and is triggered after
 *        files have been deleted, the transition effects have completed and the download template has been removed.
 * @property callable $Added The added callback is the equivalent to the add callback and is triggered after the upload
 *        template has been rendered and the transition effects have completed.
 * @property callable $Sent The sent (note the "t" instead of the "d") callback is the equivalent to the send callback
 *        and is triggered after the send callback has run and the files are about to be sent.
 * @property callable $Completed The completed callback is the equivalent to the done callback and is triggered after
 *        successful uploads after the download template has been rendered and the transition effects have completed.
 * @property callable $Failed The failed callback is the equivalent to the fail callback and is triggered after failed
 *        uploads after the download template has been rendered and the transition effects have completed.
 * @property callable $Finished The finished callback is the equivalent to the always callback and is triggered after
 *        both completed and failed uploads after the equivalent template has been rendered and the transition effects
 *        have completed.
 * @property callable $Started The <strong>started</strong> callback is the equivalent to the start callback and is
 *        triggered after the start callback has run and the transition effects called in the start callback have completed.
 *        Note: Unlike the start callback, which is always called before all send callbacks, the started callback might be
 *        called after the sent callbacks, depending on the duration of the transition effects in those callbacks.
 * @property callable $Stopped The stopped callback is the equivalent to the stop callback and is triggered after the stop
 *        callback has run and the transition effects called in the stop callback and all done callbacks have completed.
 *        The stopped callback is therefore always triggered after each completed, failed and finished callback is done.
 */

class FileUploadGen extends \QCubed\Control\FileControl
{
    /** @var string */
    protected $strUrl = null;
    /** @var string */
    protected $strType = null;
    /** @var string */
    protected $strDataType = null;
    /** @var mixed */
    protected $mixDropZone = null;
    /** @var mixed */
    protected $mixPasteZone = null;
    /** @var mixed */
    protected $mixFileInput = null;
    /** @var boolean */
    protected $blnReplaceFileInput = null;
    /** @var string */
    protected $strParamName = null;
    /** @var string */
    protected $strFormAcceptCharset = null;
    /** @var boolean */
    protected $blnSingleFileUploads = null;
    /** @var integer */
    protected $intLimitMultiFileUploads = null;
    /** @var boolean */
    protected $blnSequentialUploads = null;
    /** @var integer */
    protected $intLimitConcurrentUploads = null;
    /** @var boolean */
    protected $blnForceIframeTransport = null;
    /** @var string */
    protected $strRedirect = null;
    /** @var string */
    protected $strRedirectParamName = null;
    /** @var string */
    protected $strPostMessage = null;
    /** @var boolean */
    protected $blnMultiPart = null;
    /** @var integer */
    protected $intMaxChunkSize = null;
    /** @var integer */
    protected $intUploadedBytes = null;
    /** @var boolean */
    protected $blnRecalculateProgress = null;
    /** @var integer */
    protected $intProgressInterval = null;
    /** @var integer */
    protected $intBitrateInterval = null;
    /** @var array */
    protected $arrFormData = null;
    /** @var callable */
    protected $mixAdd = null;
    /** @var callable */
    protected $mixSubmit = null;
    /** @var callable */
    protected $mixSend = null;
    /** @var callable */
    protected $mixDone = null;
    /** @var callable */
    protected $mixFail = null;
    /** @var callable */
    protected $mixAlways = null;
    /** @var callable */
    protected $mixProgress = null;
    /** @var callable */
    protected $mixProgressAll = null;
    /** @var callable */
    protected $mixStart = null;
    /** @var callable */
    protected $mixStop = null;
    /** @var callable */
    protected $mixChange = null;
    /** @var callable */
    protected $mixPaste = null;
    /** @var callable */
    protected $mixDrop = null;
    /** @var callable */
    protected $mixDragover = null;
    /** @var boolean */
    protected $blnChunkSend = null;
    /** @var boolean */
    protected $blnChunkDone = null;
    /** @var boolean */
    protected $blnChunkFail = null;
    /** @var boolean */
    protected $blnChunkAlways = null;
    /** @var boolean */
    protected $blnAutoUpload = null;
    /** @var array */
    protected $arrProcessQueue = null;
    /** @var callable */
    protected $mixProcessStart = null;
    /** @var callable */
    protected $mixProcess = null;
    /** @var callable */
    protected $mixProcessDone = null;
    /** @var callable */
    protected $mixProcessFail = null;
    /** @var callable */
    protected $mixProcessAlways = null;
    /** @var callable */
    protected $mixProcessStop = null;
    /** @var boolean */
    protected $blnDisableImageHead = null;
    /** @var boolean */
    protected $blnDisableExif = null;
    /** @var boolean */
    protected $blnDisableExifThumbnail = null;
    /** @var boolean */
    protected $blnDisableExifSub = null;
    /** @var boolean */
    protected $blnDisableExifGps = null;
    /** @var boolean */
    protected $blnDisableImageMetaDataLoad = null;
    /** @var boolean */
    protected $blnDisableImageMetaDataSave = null;
    /** @var string */
    protected $strLoadImageFileTypes = null;
    /** @var integer */
    protected $intLoadImageMaxFileSize = null;
    /** @var boolean */
    protected $blnLoadImageNoRevoke = null;
    /** @var boolean */
    protected $blnDisableImageLoad = null;
    /** @var integer */
    protected $intImageMaxWidth = null;
    /** @var integer */
    protected $intImageMaxHeight = null;
    /** @var integer */
    protected $intImageMinWidth = null;
    /** @var integer */
    protected $intImageMinHeight = null;
    /** @var boolean */
    protected $blnImageCrop = null;
    /** @var boolean */
    protected $blnDisableImageResize = null;
    /** @var integer */
    protected $intPreviewMaxWidth = null;
    /** @var integer */
    protected $intPreviewMaxHeight = null;
    /** @var integer */
    protected $intPreviewMinWidth = null;
    /** @var integer */
    protected $intPreviewMinHeight = null;
    /** @var boolean */
    protected $blnPreviewCrop = null;
    /** @var integer */
    protected $intPreviewOrientation = null;
    /** @var boolean */
    protected $blnPreviewThumbnail = null;
    /** @var boolean */
    protected $blnPreviewCanvas = null;
    /** @var string */
    protected $strImagePreviewName = null;
    /** @var boolean */
    protected $blnDisableImagePreview = null;
    /** @var string */
    protected $strLoadAudioFileTypes = null;
    /** @var integer */
    protected $intLoadAudioMaxFileSize = null;
    /** @var string */
    protected $strAudioPreviewName = null;
    /** @var boolean */
    protected $blnDisableAudioPreview = null;
    /** @var string */
    protected $strLoadVideoFileTypes = null;
    /** @var integer */
    protected $intLoadVideoMaxFileSize = null;
    /** @var string */
    protected $strVideoPreviewName = null;
    /** @var boolean */
    protected $blnDisableVideoPreview = null;
    /** @var string */
    protected $strAcceptFileTypes = null;
    /** @var integer */
    protected $intMaxFileSize = null;
    /** @var integer */
    protected $intMinFileSize = null;
    /** @var integer */
    protected $intMaxNumberOfFiles = null;
    /** @var boolean */
    protected $blnDisableValidation = null;
    /** @var callable */
    protected $mixGetNumberOfFiles = null;
    /** @var mixed */
    protected $mixFilesContainer = null;
    /** @var boolean */
    protected $blnPrependFiles = null;
    /** @var callable */
    protected $mixUploadTemplate = null;
    /** @var string */
    protected $strUploadTemplateId = null;
    /** @var callable */
    protected $mixDownloadTemplate = null;
    /** @var string */
    protected $strDownloadTemplateId = null;
    /** @var callable */
    protected $mixDestroy = null;
    /** @var callable */
    protected $mixDestroyed = null;
    /** @var callable */
    protected $mixAdded = null;
    /** @var callable */
    protected $mixSent = null;
    /** @var callable */
    protected $mixCompleted = null;
    /** @var callable */
    protected $mixFailed = null;
    /** @var callable */
    protected $mixFinished = null;
    /** @var callable */
    protected $mixStarted = null;
    /** @var callable */
    protected $mixStopped = null;

    protected function makeJqOptions()
    {
        $jqOptions = parent::MakeJqOptions();
        if (!is_null($val = $this->Url)) {$jqOptions['url'] = $val;}
        if (!is_null($val = $this->Type)) {$jqOptions['type'] = $val;}
        if (!is_null($val = $this->DataType)) {$jqOptions['dataType'] = $val;}
        if (!is_null($val = $this->DropZone)) {$jqOptions['dropZone'] = $val;}
        if (!is_null($val = $this->PasteZone)) {$jqOptions['pasteZone'] = $val;}
        if (!is_null($val = $this->FileInput)) {$jqOptions['fileInput'] = $val;}
        if (!is_null($val = $this->ReplaceFileInput)) {$jqOptions['replaceFileInput'] = $val;}
        if (!is_null($val = $this->ParamName)) {$jqOptions['paramName'] = $val;}
        if (!is_null($val = $this->FormAcceptCharset)) {$jqOptions['formAcceptCharset'] = $val;}
        if (!is_null($val = $this->SingleFileUploads)) {$jqOptions['singleFileUploads'] = $val;}
        if (!is_null($val = $this->LimitMultiFileUploads)) {$jqOptions['limitMultiFileUploads'] = $val;}
        if (!is_null($val = $this->SequentialUploads)) {$jqOptions['sequentialUploads'] = $val;}
        if (!is_null($val = $this->LimitConcurrentUploads)) {$jqOptions['limitConcurrentUploads'] = $val;}
        if (!is_null($val = $this->ForceIframeTransport)) {$jqOptions['forceIframeTransport'] = $val;}
        if (!is_null($val = $this->Redirect)) {$jqOptions['redirect'] = $val;}
        if (!is_null($val = $this->RedirectParamName)) {$jqOptions['redirectParamName'] = $val;}
        if (!is_null($val = $this->PostMessage)) {$jqOptions['postMessage'] = $val;}
        if (!is_null($val = $this->MultiPart)) {$jqOptions['multipart'] = $val;}
        if (!is_null($val = $this->MaxChunkSize)) {$jqOptions['maxChunkSize'] = $val;}
        if (!is_null($val = $this->UploadedBytes)) {$jqOptions['uploadedBytes'] = $val;}
        if (!is_null($val = $this->RecalculateProgress)) {$jqOptions['recalculateProgress'] = $val;}
        if (!is_null($val = $this->ProgressInterval)) {$jqOptions['progressInterval'] = $val;}
        if (!is_null($val = $this->BitrateInterval)) {$jqOptions['bitrateInterval'] = $val;}
        if (!is_null($val = $this->FormData)) {$jqOptions['formData\''] = $val;}
        if (!is_null($val = $this->Add)) {$jqOptions['add'] = $val;}
        if (!is_null($val = $this->Submit)) {$jqOptions['submit'] = $val;}
        if (!is_null($val = $this->Send)) {$jqOptions['donesend'] = $val;}
        if (!is_null($val = $this->Done)) {$jqOptions[''] = $val;}
        if (!is_null($val = $this->Fail)) {$jqOptions['fail'] = $val;}
        if (!is_null($val = $this->Always)) {$jqOptions['always'] = $val;}
        if (!is_null($val = $this->Progress)) {$jqOptions['progress'] = $val;}
        if (!is_null($val = $this->ProgressAll)) {$jqOptions['progressall'] = $val;}
        if (!is_null($val = $this->Start)) {$jqOptions['start'] = $val;}
        if (!is_null($val = $this->Stop)) {$jqOptions['stop'] = $val;}
        if (!is_null($val = $this->Change)) {$jqOptions['change'] = $val;}
        if (!is_null($val = $this->Paste)) {$jqOptions['paste'] = $val;}
        if (!is_null($val = $this->Drop)) {$jqOptions['drop'] = $val;}
        if (!is_null($val = $this->Dragover)) {$jqOptions['dragover'] = $val;}
        if (!is_null($val = $this->ChunkSend)) {$jqOptions['chunksend'] = $val;}
        if (!is_null($val = $this->ChunkDone)) {$jqOptions['chunkdone'] = $val;}
        if (!is_null($val = $this->ChunkFail)) {$jqOptions['chunkfail'] = $val;}
        if (!is_null($val = $this->ChunkAlways)) {$jqOptions['chunkalways'] = $val;}
        if (!is_null($val = $this->AutoUpload)) {$jqOptions['autoUpload'] = $val;}
        if (!is_null($val = $this->ProcessQueue)) {$jqOptions['processQueue'] = $val;}
        if (!is_null($val = $this->ProcessStart)) {$jqOptions['processstart'] = $val;}
        if (!is_null($val = $this->Process)) {$jqOptions['process'] = $val;}
        if (!is_null($val = $this->ProcessDone)) {$jqOptions['processdone'] = $val;}
        if (!is_null($val = $this->ProcessFail)) {$jqOptions['processfail'] = $val;}
        if (!is_null($val = $this->ProcessAlways)) {$jqOptions['processalways'] = $val;}
        if (!is_null($val = $this->ProcessStop)) {$jqOptions['processstop'] = $val;}
        if (!is_null($val = $this->DisableImageHead)) {$jqOptions['disableImageHead'] = $val;}
        if (!is_null($val = $this->DisableExif)) {$jqOptions['disableExif'] = $val;}
        if (!is_null($val = $this->DisableExifThumbnail)) {$jqOptions['disableExifThumbnail'] = $val;}
        if (!is_null($val = $this->DisableExifSub)) {$jqOptions['disableExifSub'] = $val;}
        if (!is_null($val = $this->DisableExifGps)) {$jqOptions['disableExifGps'] = $val;}
        if (!is_null($val = $this->DisableImageMetaDataLoad)) {$jqOptions['disableImageMetaDataLoad'] = $val;}
        if (!is_null($val = $this->DisableImageMetaDataSave)) {$jqOptions['disableImageMetaDataSave'] = $val;}
        if (!is_null($val = $this->LoadImageFileTypes)) {$jqOptions['loadImageFileTypes'] = $val;}
        if (!is_null($val = $this->LoadImageMaxFileSize)) {$jqOptions['loadImageMaxFileSize'] = $val;}
        if (!is_null($val = $this->LoadImageNoRevoke)) {$jqOptions['loadImageNoRevoke'] = $val;}
        if (!is_null($val = $this->DisableImageLoad)) {$jqOptions['disableImageLoad'] = $val;}
        if (!is_null($val = $this->ImageMaxWidth)) {$jqOptions['imageMaxWidth'] = $val;}
        if (!is_null($val = $this->ImageMaxHeight)) {$jqOptions['imageMaxHeight'] = $val;}
        if (!is_null($val = $this->ImageMinWidth)) {$jqOptions['imageMinWidth'] = $val;}
        if (!is_null($val = $this->ImageMinHeight)) {$jqOptions['imageMinHeight'] = $val;}
        if (!is_null($val = $this->ImageCrop)) {$jqOptions['imageCrop'] = $val;}
        if (!is_null($val = $this->DisableImageResize)) {$jqOptions['disableImageResize'] = $val;}
        if (!is_null($val = $this->PreviewMaxWidth)) {$jqOptions['previewMaxWidth'] = $val;}
        if (!is_null($val = $this->PreviewMaxHeight)) {$jqOptions['previewMaxHeight'] = $val;}
        if (!is_null($val = $this->PreviewMinWidth)) {$jqOptions['previewMinWidth'] = $val;}
        if (!is_null($val = $this->PreviewMinHeight)) {$jqOptions['previewMinHeight'] = $val;}
        if (!is_null($val = $this->PreviewCrop)) {$jqOptions['previewCrop'] = $val;}
        if (!is_null($val = $this->PreviewOrientation)) {$jqOptions['previewOrientation'] = $val;}
        if (!is_null($val = $this->PreviewThumbnail)) {$jqOptions['previewThumbnail'] = $val;}
        if (!is_null($val = $this->PreviewCanvas)) {$jqOptions['previewCanvas'] = $val;}
        if (!is_null($val = $this->ImagePreviewName)) {$jqOptions['imagePreviewName'] = $val;}
        if (!is_null($val = $this->DisableImagePreview)) {$jqOptions['disableImagePreview'] = $val;}
        if (!is_null($val = $this->LoadAudioFileTypes)) {$jqOptions['loadAudioFileTypes'] = $val;}
        if (!is_null($val = $this->LoadAudioMaxFileSize)) {$jqOptions['loadAudioMaxFileSize'] = $val;}
        if (!is_null($val = $this->AudioPreviewName)) {$jqOptions['audioPreviewName'] = $val;}
        if (!is_null($val = $this->DisableAudioPreview)) {$jqOptions['disableAudioPreview'] = $val;}
        if (!is_null($val = $this->LoadVideoFileTypes)) {$jqOptions['loadVideoFileTypes'] = $val;}
        if (!is_null($val = $this->LoadVideoMaxFileSize)) {$jqOptions['loadVideoMaxFileSize'] = $val;}
        if (!is_null($val = $this->VideoPreviewName)) {$jqOptions['videoPreviewName'] = $val;}
        if (!is_null($val = $this->DisableVideoPreview)) {$jqOptions['disableVideoPreview'] = $val;}
        if (!is_null($val = $this->AcceptFileTypes)) {$jqOptions['acceptFileTypes'] = $val;}
        if (!is_null($val = $this->MaxFileSize)) {$jqOptions['maxFileSize'] = $val;}
        if (!is_null($val = $this->MinFileSize)) {$jqOptions['minFileSize'] = $val;}
        if (!is_null($val = $this->MaxNumberOfFiles)) {$jqOptions['maxNumberOfFiles'] = $val;}
        if (!is_null($val = $this->DisableValidation)) {$jqOptions['disableValidation'] = $val;}
        if (!is_null($val = $this->GetNumberOfFiles)) {$jqOptions['getNumberOfFiles'] = $val;}
        if (!is_null($val = $this->FilesContainer)) {$jqOptions['filesContainer'] = $val;}
        if (!is_null($val = $this->PrependFiles)) {$jqOptions['prependFiles'] = $val;}
        if (!is_null($val = $this->UploadTemplate)) {$jqOptions['uploadTemplate'] = $val;}
        if (!is_null($val = $this->UploadTemplateId)) {$jqOptions['uploadTemplateId'] = $val;}
        if (!is_null($val = $this->DownloadTemplate)) {$jqOptions['downloadTemplate'] = $val;}
        if (!is_null($val = $this->DownloadTemplateId)) {$jqOptions['downloadTemplateId'] = $val;}
        if (!is_null($val = $this->Destroy)) {$jqOptions['destroy'] = $val;}
        if (!is_null($val = $this->Destroyed)) {$jqOptions['destroyed'] = $val;}
        if (!is_null($val = $this->Added)) {$jqOptions['added'] = $val;}
        if (!is_null($val = $this->Sent)) {$jqOptions['sent'] = $val;}
        if (!is_null($val = $this->Completed)) {$jqOptions['completed'] = $val;}
        if (!is_null($val = $this->Failed)) {$jqOptions['failed'] = $val;}
        if (!is_null($val = $this->Finished)) {$jqOptions['finished'] = $val;}
        if (!is_null($val = $this->Started)) {$jqOptions['started'] = $val;}
        if (!is_null($val = $this->Stopped)) {$jqOptions['stopped'] = $val;}
        return $jqOptions;
    }

    public function getJqSetupFunction()
    {
        return 'fileupload';
    }

    public function __get($strName)
    {
        switch ($strName) {
            case 'Url': return $this->strUrl;
            case 'Type': return $this->strType;
            case 'DataType': return $this->strDataType;
            case 'DropZone': return $this->mixDropZone;
            case 'PasteZone': return $this->mixPasteZone;
            case 'FileInput': return $this->mixFileInput;
            case 'ReplaceFileInput': return $this->blnReplaceFileInput;
            case 'ParamName': return $this->strParamName;
            case 'FormAcceptCharset': return $this->strFormAcceptCharset;
            case 'SingleFileUploads': return $this->blnSingleFileUploads;
            case 'LimitMultiFileUploads': return $this->intLimitMultiFileUploads;
            case 'SequentialUploads': return $this->blnSequentialUploads;
            case 'LimitConcurrentUploads': return $this->intLimitConcurrentUploads;
            case 'ForceIframeTransport': return $this->blnForceIframeTransport;
            case 'Redirect': return $this->strRedirect;
            case 'RedirectParamName': return $this->strRedirectParamName;
            case 'PostMessage': return $this->strPostMessage;
            case 'MultiPart': return $this->blnMultiPart;
            case 'MaxChunkSize': return $this->intMaxChunkSize;
            case 'UploadedBytes': return $this->intUploadedBytes;
            case 'RecalculateProgress': return $this->blnRecalculateProgress;
            case 'ProgressInterval': return $this->intProgressInterval;
            case 'BitrateInterval': return $this->intBitrateInterval;
            case 'FormData': return $this->arrFormData;
            case 'Add': return $this->mixAdd;
            case 'Submit': return $this->mixSubmit;
            case 'Send': return $this->mixSend;
            case 'Done': return $this->mixDone;
            case 'Fail': return $this->mixFail;
            case 'Always': return $this->mixAlways;
            case 'Progress': return $this->mixProgress;
            case 'ProgressAll': return $this->mixProgressAll;
            case 'Start': return $this->mixStart;
            case 'Stop': return $this->mixStop;
            case 'Change': return $this->mixChange;
            case 'Paste': return $this->mixPaste;
            case 'Drop': return $this->mixDrop;
            case 'Dragover': return $this->mixDragover;
            case 'ChunkSend': return $this->blnChunkSend;
            case 'ChunkDone': return $this->blnChunkDone;
            case 'ChunkFail': return $this->blnChunkFail;
            case 'ChunkAlways': return $this->blnChunkAlways;
            case 'AutoUpload': return $this->blnAutoUpload;
            case 'ProcessQueue': return $this->arrProcessQueue;
            case 'ProcessStart': return $this->mixProcessStart;
            case 'Process': return $this->mixProcess;
            case 'ProcessDone': return $this->mixProcessDone;
            case 'ProcessFail': return $this->mixProcessFail;
            case 'ProcessAlways': return $this->mixProcessAlways;
            case 'ProcessStop': return $this->mixProcessStop;
            case 'DisableImageHead': return $this->blnDisableImageHead;
            case 'DisableExif': return $this->blnDisableExif;
            case 'DisableExifThumbnail': return $this->blnDisableExifThumbnail;
            case 'DisableExifSub': return $this->blnDisableExifSub;
            case 'DisableExifGps': return $this->blnDisableExifGps;
            case 'DisableImageMetaDataLoad': return $this->blnDisableImageMetaDataLoad;
            case 'DisableImageMetaDataSave': return $this->blnDisableImageMetaDataSave;
            case 'LoadImageFileTypes': return $this->strLoadImageFileTypes;
            case 'LoadImageMaxFileSize': return $this->intLoadImageMaxFileSize;
            case 'LoadImageNoRevoke': return $this->blnLoadImageNoRevoke;
            case 'DisableImageLoad': return $this->blnDisableImageLoad;
            case 'ImageMaxWidth': return $this->intImageMaxWidth;
            case 'ImageMaxHeight': return $this->intImageMaxHeight;
            case 'ImageMinWidth': return $this->intImageMinWidth;
            case 'ImageMinHeight': return $this->intImageMinHeight;
            case 'ImageCrop': return $this->blnImageCrop;
            case 'DisableImageResize': return $this->blnDisableImageResize;
            case 'PreviewMaxWidth': return $this->intPreviewMaxWidth;
            case 'PreviewMaxHeight': return $this->intPreviewMaxHeight;
            case 'PreviewMinWidth': return $this->intPreviewMinWidth;
            case 'PreviewMinHeight': return $this->intPreviewMinHeight;
            case 'PreviewCrop': return $this->blnPreviewCrop;
            case 'PreviewOrientation': return $this->intPreviewOrientation;
            case 'PreviewThumbnail': return $this->blnPreviewThumbnail;
            case 'PreviewCanvas': return $this->blnPreviewCanvas;
            case 'ImagePreviewName': return $this->strImagePreviewName;
            case 'DisableImagePreview': return $this->blnDisableImagePreview;
            case 'LoadAudioFileTypes': return $this->strLoadAudioFileTypes;
            case 'LoadAudioMaxFileSize': return $this->intLoadAudioMaxFileSize;
            case 'AudioPreviewName': return $this->strAudioPreviewName;
            case 'DisableAudioPreview': return $this->blnDisableAudioPreview;
            case 'LoadVideoFileTypes': return $this->strLoadVideoFileTypes;
            case 'LoadVideoMaxFileSize': return $this->intLoadVideoMaxFileSize;
            case 'VideoPreviewName': return $this->strVideoPreviewName;
            case 'DisableVideoPreview': return $this->blnDisableVideoPreview;
            case 'AcceptFileTypes': return $this->strAcceptFileTypes;
            case 'MaxFileSize': return $this->intMaxFileSize;
            case 'MinFileSize': return $this->intMinFileSize;
            case 'MaxNumberOfFiles': return $this->intMaxNumberOfFiles;
            case 'DisableValidation': return $this->blnDisableValidation;
            case 'GetNumberOfFiles': return $this->mixGetNumberOfFiles;
            case 'FilesContainer': return $this->mixFilesContainer;
            case 'PrependFiles': return $this->blnPrependFiles;
            case 'UploadTemplate': return $this->mixUploadTemplate;
            case 'UploadTemplateId': return $this->strUploadTemplateId;
            case 'DownloadTemplate': return $this->mixDownloadTemplate;
            case 'DownloadTemplateId': return $this->strDownloadTemplateId;
            case 'Destroy': return $this->mixDestroy;
            case 'Destroyed': return $this->mixDestroyed;
            case 'Added': return $this->mixAdded;
            case 'Sent': return $this->mixSent;
            case 'Completed': return $this->mixCompleted;
            case 'Failed': return $this->mixFailed;
            case 'Finished': return $this->mixFinished;
            case 'Started': return $this->mixStarted;
            case 'Stopped': return $this->mixStopped;

            default:
                try {
                    return parent::__get($strName);
                } catch (Caller $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }
        }
    }

    public function __set($strName, $mixValue)
    {
        switch ($strName) {
            case 'Url':
                try {
                    $this->strUrl = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'url', $this->strType);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Type':
                try {
                    $this->strType = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'type', $this->strType);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DataType':
                try {
                    $this->strDataType = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'dataType', $this->strDataType);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DropZone':
                $this->mixDropZone = $mixValue;
                $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'dropZone', $mixValue);
                break;

            case 'PasteZone':
                $this->mixPasteZone = $mixValue;
                $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'pasteZone', $mixValue);
                break;

            case 'FileInput':
                $this->mixFileInput = $mixValue;
                $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'fileInput', $mixValue);
                break;

            case 'ReplaceFileInput':
                try {
                    $this->blnReplaceFileInput = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'replaceFileInput', $this->blnReplaceFileInput);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ParamName':
                try {
                    $this->strParamName = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'paramName', $this->strParamName);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'FormAcceptCharset':
                try {
                    $this->strFormAcceptCharset = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'formAcceptCharset', $this->strFormAcceptCharset);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'SingleFileUploads':
                try {
                    $this->blnSingleFileUploads = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'singleFileUploads', $this->blnSingleFileUploads);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'LimitMultiFileUploads':
                try {
                    $this->intLimitMultiFileUploads = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'limitMultiFileUploads', $this->intLimitMultiFileUploads);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'SequentialUploads':
                try {
                    $this->blnSequentialUploads = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'sequentialUploads', $this->blnSequentialUploads);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'LimitConcurrentUploads':
                try {
                    $this->intLimitConcurrentUploads = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'limitConcurrentUploads', $this->intLimitConcurrentUploads);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ForceIframeTransport':
                try {
                    $this->blnForceIframeTransport = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'forceIframeTransport', $this->blnForceIframeTransport);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Redirect':
                try {
                    $this->strRedirect = Type::Cast($mixValue, Type::STRING);

                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'redirect', $this->strRedirect);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'RedirectParamName':
                try {
                    $this->strRedirectParamName = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'redirectParamName', $this->strRedirectParamName);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'PostMessage':
                try {
                    $this->strPostMessage = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'postMessage', $this->strPostMessage);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'MultiPart':
                try {
                    $this->blnMultiPart = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'multipart', $this->blnMultiPart);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'MaxChunkSize':
                try {
                    $this->intMaxChunkSize = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'maxChunkSize', $this->intMaxChunkSize);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'UploadedBytes':
                try {
                    $this->intUploadedBytes = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'uploadedBytes', $this->intUploadedBytes);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'RecalculateProgress':
                try {
                    $this->blnRecalculateProgress = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'recalculateProgress', $this->blnRecalculateProgress);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ProgressInterval':
                try {
                    $this->intProgressInterval = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'progressInterval', $this->intProgressInterval);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'BitrateInterval':
                try {
                    $this->intBitrateInterval = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'bitrateInterval', $this->intBitrateInterval);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'FormData':
                try {
                    $this->arrFormData = Type::Cast($mixValue, Type::ARRAY_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'formData', $this->arrFormData);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Add':
                try {
                    $this->mixAdd = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'add', $this->mixAdd);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Submit':
                try {
                    $this->mixSubmit = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'submit', $this->mixSubmit);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Send':
                try {
                    $this->mixSend = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'send', $this->mixSend);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Done':
                try {
                    $this->mixDone = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'done', $this->mixDone);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Fail':
                try {
                    $this->mixFail = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'fail', $this->mixFail);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Always':
                try {
                    $this->mixAlways = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'always', $this->mixAlways);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Progress':
                try {
                    $this->mixProgress = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'progress', $this->mixProgress);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ProgressAll':
                try {
                    $this->mixProgressAll = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'progressall', $this->mixProgressAll);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Start':
                try {
                    $this->mixStart = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'start', $this->mixStart);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Stop':
                try {
                    $this->mixStop = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'stop', $this->mixStop);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Change':
                try {
                    $this->mixChange = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'change', $this->mixChange);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Paste':
                try {
                    $this->mixPaste = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'paste', $this->mixPaste);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Drop':
                try {
                    $this->mixDrop = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'drop', $this->mixDrop);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Dragover':
                try {
                    $this->mixDragover = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'dragover', $this->mixDragover);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ChunkSend':
                try {
                    $this->blnChunkSend = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'chunksend', $this->blnChunkSend);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ChunkDone':
                try {
                    $this->blnChunkDone = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'chunkdone', $this->blnChunkDone);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ChunkFail':
                try {
                    $this->blnChunkFail = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'chunkfail', $this->blnChunkFail);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ChunkAlways':
                try {
                    $this->blnChunkAlways = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'chunkalways', $this->blnChunkAlways);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'AutoUpload':
                try {
                    $this->blnAutoUpload = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'autoUpload', $this->blnAutoUpload);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ProcessQueue':
                try {
                    $this->arrProcessQueue = Type::Cast($mixValue, Type::ARRAY_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'processQueue', $this->arrProcessQueue);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ProcessStart':
                try {
                    $this->mixProcessStart = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'processstart', $this->mixProcessStart);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Process':
                try {
                    $this->mixProcess = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'process', $this->mixProcess);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ProcessDone':
                try {
                    $this->mixProcessDone = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'processdone', $this->mixProcessDone);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ProcessFail':
                try {
                    $this->mixProcessFail = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'processfail', $this->mixProcessFail);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ProcessAlways':
                try {
                    $this->mixProcessAlways = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'processalways', $this->mixProcessAlways);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ProcessStop':
                try {
                    $this->mixProcessStop = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'processstop', $this->mixProcessStop);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableImageHead':
                try {
                    $this->blnDisableImageHead = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableImageHead', $this->blnDisableImageHead);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableExif':
                try {
                    $this->blnDisableExif = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableExif', $this->blnDisableExif);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableExifThumbnail':
                try {
                    $this->blnDisableExifThumbnail = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableExifThumbnail', $this->blnDisableExifThumbnail);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableExifSub':
                try {
                    $this->blnDisableExifSub = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableExifSub', $this->blnDisableExifSub);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableExifGps':
                try {
                    $this->blnDisableExifGps = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableExifGps', $this->blnDisableExifGps);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableImageMetaDataLoad':
                try {
                    $this->blnDisableImageMetaDataLoad = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableImageMetaDataLoad', $this->blnDisableImageMetaDataLoad);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableImageMetaDataSave':
                try {
                    $this->blnDisableImageMetaDataSave = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableImageMetaDataSave', $this->blnDisableImageMetaDataSave);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'LoadImageFileTypes':
                try {
                    $this->strLoadImageFileTypes = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'loadImageFileTypes', $this->strLoadImageFileTypes);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'LoadImageMaxFileSize':
                try {
                    $this->intLoadImageMaxFileSize = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'loadImageMaxFileSize', $this->intLoadImageMaxFileSize);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'LoadImageNoRevoke':
                try {
                    $this->blnLoadImageNoRevoke = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'loadImageNoRevoke', $this->blnLoadImageNoRevoke);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableImageLoad':
                try {
                    $this->blnDisableImageLoad = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableImageLoad', $this->blnDisableImageLoad);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ImageMaxWidth':
                try {
                    $this->intImageMaxWidth = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'imageMaxWidth', $this->intImageMaxWidth);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ImageMaxHeight':
                try {
                    $this->intImageMaxHeight = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'imageMaxHeight', $this->intImageMaxHeight);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ImageMinWidth':
                try {
                    $this->intImageMinWidth = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'imageMinWidth', $this->intImageMinWidth);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ImageMinHeight':
                try {
                    $this->intImageMinHeight = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'imageMinHeight', $this->intImageMinHeight);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ImageCrop':
                try {
                    $this->blnImageCrop = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'imageCrop', $this->blnImageCrop);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableImageResize':
                try {
                    $this->blnDisableImageResize = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableImageResize', $this->blnDisableImageResize);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'PreviewMaxWidth':
                try {
                    $this->intPreviewMaxWidth = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'previewMaxWidth', $this->intPreviewMaxWidth);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'PreviewMaxHeight':
                try {
                    $this->intPreviewMaxHeight = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'previewMaxHeight', $this->intPreviewMaxHeight);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'PreviewMinWidth':
                try {
                    $this->intPreviewMinWidth = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'previewMinWidth', $this->intPreviewMinWidth);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'PreviewMinHeight':
                try {
                    $this->intPreviewMinHeight = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'previewMinHeight', $this->intPreviewMinHeight);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'PreviewCrop':
                try {
                    $this->blnPreviewCrop = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'previewCrop', $this->blnPreviewCrop);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'PreviewOrientation':
                try {
                    $this->intPreviewOrientation = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'previewOrientation', $this->intPreviewOrientation);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'PreviewThumbnail':
                try {
                    $this->blnPreviewThumbnail = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'previewThumbnail', $this->blnPreviewThumbnail);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'PreviewCanvas':
                try {
                    $this->blnPreviewCanvas = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'previewCanvas', $this->blnPreviewCanvas);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'ImagePreviewName':
                try {
                    $this->strImagePreviewName = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'imagePreviewName', $this->strImagePreviewName);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableImagePreview':
                try {
                    $this->blnDisableImagePreview = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableImagePreview', $this->blnDisableImagePreview);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'LoadAudioFileTypes':
                try {
                    $this->strLoadAudioFileTypes = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'loadAudioFileTypes', $this->strLoadAudioFileTypes);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'LoadAudioMaxFileSize':
                try {
                    $this->intLoadAudioMaxFileSize = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'loadAudioMaxFileSize', $this->intLoadAudioMaxFileSize);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'AudioPreviewName':
                try {
                    $this->strAudioPreviewName = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'audioPreviewName', $this->strAudioPreviewName);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableAudioPreview':
                try {
                    $this->blnDisableAudioPreview = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableAudioPreview', $this->blnDisableAudioPreview);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'LoadVideoFileTypes':
                try {
                    $this->strLoadVideoFileTypes = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'loadVideoFileTypes', $this->strLoadVideoFileTypes);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'LoadVideoMaxFileSize':
                try {
                    $this->intLoadVideoMaxFileSize = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'loadVideoMaxFileSize', $this->intLoadVideoMaxFileSize);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'VideoPreviewName':
                try {
                    $this->strVideoPreviewName = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'videoPreviewName', $this->strVideoPreviewName);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableVideoPreview':
                try {
                    $this->blnDisableVideoPreview = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableVideoPreview', $this->blnDisableVideoPreview);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'AcceptFileTypes':
                try {
                    $this->strAcceptFileTypes = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'acceptFileTypes', $this->strAcceptFileTypes);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'MaxFileSize':
                try {
                    $this->intMaxFileSize = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'maxFileSize', $this->intMaxFileSize);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'MinFileSize':
                try {
                    $this->intMinFileSize = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'minFileSize', $this->intMinFileSize);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'MaxNumberOfFiles':
                try {
                    $this->intMaxNumberOfFiles = Type::Cast($mixValue, Type::INTEGER);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'maxNumberOfFiles', $this->intMaxNumberOfFiles);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DisableValidation':
                try {
                    $this->blnDisableValidation = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'disableValidation', $this->blnDisableValidation);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'GetNumberOfFiles':
                try {
                    $this->mixGetNumberOfFiles = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'getNumberOfFiles', $this->mixGetNumberOfFiles);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'FilesContainer':
                $this->mixFilesContainer = $mixValue;
                $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'filesContainer', $mixValue);
                break;

            case 'PrependFiles':
                try {
                    $this->blnPrependFiles = Type::Cast($mixValue, Type::BOOLEAN);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'prependFiles', $this->blnPrependFiles);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'UploadTemplate':
                try {
                    $this->mixUploadTemplate = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'uploadTemplate', $this->mixUploadTemplate);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'UploadTemplateId':
                try {
                    $this->strUploadTemplateId = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'uploadTemplateId', $this->strUploadTemplateId);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DownloadTemplate':
                try {
                    $this->mixDownloadTemplate = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'downloadTemplate', $this->mixDownloadTemplate);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'DownloadTemplateId':
                try {
                    $this->strDownloadTemplateId = Type::Cast($mixValue, Type::STRING);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'downloadTemplateId', $this->strDownloadTemplateId);
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Destroy':
                try {
                    $this->mixDestroy = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'destroy', $this->mixDestroy);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Destroyed':
                try {
                    $this->mixDestroyed = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'destroyed', $this->mixDestroyed);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Added':
                try {
                    $this->mixAdded = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'added', $this->mixAdded);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Sent':
                try {
                    $this->mixSent = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'sent', $this->mixSent);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Completed':
                try {
                    $this->mixCompleted = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'completed', $this->mixCompleted);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Failed':
                try {
                    $this->mixFailed = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'failed', $this->mixFailed);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Finished':
                try {
                    $this->mixFinished = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'finished', $this->mixFinished);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Started':
                try {
                    $this->mixStarted = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'started', $this->mixStarted);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Stopped':
                try {
                    $this->mixStopped = ($mixValue instanceof Q\Js\Closure) ? $mixValue : Type::cast($mixValue, Type::CALLABLE_TYPE);
                    $this->addAttributeScript($this->getJqSetupFunction(), 'option', 'stopped', $this->mixStopped);
                    $this->markAsModified();
                    break;
                } catch (InvalidCast $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }

            case 'Enabled':
                $this->Disabled = !$mixValue;    // Tie in standard QCubed functionality
                parent::__set($strName, $mixValue);
                break;

            default:
                try {
                    parent::__set($strName, $mixValue);
                    break;
                } catch (Caller $objExc) {
                    $objExc->incrementOffset();
                    throw $objExc;
                }
        }
    }
}